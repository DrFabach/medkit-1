image: python:3.7

variables:
  POETRY_HOME: /etc/poetry

# Trigger the pipeline on develop/main branches and all MRs (except develop merge to main)
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME != "develop"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_COMMIT_TAG'

stages:
  - setup
  - test
  - publish

# Define a default cache using CACHE_KEY variable
cache: &default_cache
  key:
    files:
      - poetry.lock
  paths:
    - .venv
  policy: pull

# Define reusable scripts
.prepare_poetry_env: &prepare_poetry_env
  - curl -sSL https://install.python-poetry.org | python3 - --version 1.4.0
  - export PATH=$PATH:$POETRY_HOME/bin
  - poetry --version
  - poetry env use python3.7
  - poetry env info

.install_test_packages: &install_test_packages
  - DEBIAN_FRONTEND=noninteractive apt-get update
  - DEBIAN_FRONTEND=noninteractive apt-get install -y gcc g++ libsndfile1

.install_doc_packages: &install_doc_packages
  - DEBIAN_FRONTEND=noninteractive apt update
  - DEBIAN_FRONTEND=noninteractive apt install -y graphviz libsndfile1

# ------- Jobs declaration --------

# Set up cache for all pipeline jobs
# If poetry.lock needs to be updated:
# - the job fails
# - the poetry.lock file to commit is exposed as artifact
setup_cache:
  stage: setup
  tags:
    - docker-cache
  cache:
    <<: *default_cache
    policy: pull-push
  script:
    - *prepare_poetry_env
    - poetry lock --check || FAILED=true
    - if [ $FAILED ]; then poetry lock --no-update; exit 1; fi # update lock file if check fails
    - poetry install --with=docs --all-extras --sync
    - source .venv/bin/activate
    - pip list
  artifacts:
    when: on_failure
    expose_as: "Poetry lock file to commit"
    paths:
      - poetry.lock
  interruptible: true

.use_cache:
  tags:
    - docker-cache
  needs: [setup_cache]
  cache: *default_cache

# Declare testing jobs

linting:
  stage: test
  extends: .use_cache
  before_script:
    - source .venv/bin/activate
    - pre-commit install
  script:
    - echo "Executing linting..."
    - pre-commit run --all-files
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - when: always
  interruptible: true
  allow_failure: true

unit_tests:
  stage: test
  extends: .use_cache
  before_script:
    - *install_test_packages
    - source .venv/bin/activate
  script:
    - echo "Executing unit tests..."
    - coverage run -m pytest -rsv --junit-xml=report.xml tests/unit
    - coverage report
    - coverage xml
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - when: always
  interruptible: true

# TODO: activate weekly job to verify non-regression ?
large_tests:
  stage: test
  extends: .use_cache
  before_script:
    - source .venv/bin/activate
  script:
    - echo "Executing large tests..."
    - pytest -v tests/large
  rules:
    - when: never
  interruptible: true

doc-test:
  stage: test
  extends: .use_cache
  before_script:
    - *install_doc_packages
    - source .venv/bin/activate
  script:
    - echo "Building docs..."
    - jb build docs 2>error.log # commands always return 0, we have to check error logs
    - mv docs/_build/jupyter_execute .
    - mv docs/_build/html test
    - if [ -s "error.log" ]; then cat error.log;exit 1; fi
  artifacts:
    when: always
    expose_as: "Docs"
    paths:
      - test
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - when: always
  interruptible: true
  allow_failure: true


# Declare release jobs
release:
  stage: publish
  extends: .use_cache
  script:
    - *prepare_poetry_env
    - poetry self add "poetry-dynamic-versioning[plugin]"
    - poetry build
    - poetry config repositories.gitlab "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi"
    - poetry publish -r gitlab -u gitlab-ci-token -p ${CI_JOB_TOKEN}
    - poetry publish
  rules:
    - if: '$CI_COMMIT_TAG'

pages:
  stage: publish
  extends: .use_cache
  before_script:
    - *install_doc_packages
    - source .venv/bin/activate
  script:
    - jb build docs
    - mv docs/_build/jupyter_execute .
    - mv docs/_build/html public
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_COMMIT_BRANCH =~ /^release-*/'
      when: manual
